// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5302017279983033347),
      name: 'Artist',
      lastPropertyId: const IdUid(4, 891288130857673738),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 34853372524349134),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8620812922773392275),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2014693009140533932),
            name: 'dateCreated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 891288130857673738),
            name: 'link',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8175199129962921589),
      name: 'Lyrics',
      lastPropertyId: const IdUid(6, 908587744695521804),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4772099369205216058),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8918245897520967784),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4702594785808992958),
            name: 'dateCreated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9197117843280318118),
            name: 'link',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8615549229330900212),
            name: 'artistId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 888855679922408793),
            relationTarget: 'Artist'),
        ModelProperty(
            id: const IdUid(6, 908587744695521804),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 8175199129962921589),
      lastIndexId: const IdUid(1, 888855679922408793),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Artist: EntityDefinition<Artist>(
        model: _entities[0],
        toOneRelations: (Artist object) => [],
        toManyRelations: (Artist object) => {},
        getId: (Artist object) => object.id,
        setId: (Artist object, int id) {
          object.id = id;
        },
        objectToFB: (Artist object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final linkOffset = fbb.writeString(object.link);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.dateCreated.millisecondsSinceEpoch);
          fbb.addOffset(3, linkOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Artist(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              link: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              dateCreated: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));

          return object;
        }),
    Lyrics: EntityDefinition<Lyrics>(
        model: _entities[1],
        toOneRelations: (Lyrics object) => [object.artist],
        toManyRelations: (Lyrics object) => {},
        getId: (Lyrics object) => object.id,
        setId: (Lyrics object, int id) {
          object.id = id;
        },
        objectToFB: (Lyrics object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          final linkOffset = fbb.writeString(object.link);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contentOffset);
          fbb.addInt64(2, object.dateCreated.millisecondsSinceEpoch);
          fbb.addOffset(3, linkOffset);
          fbb.addInt64(4, object.artist.targetId);
          fbb.addOffset(5, titleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Lyrics(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              link: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              content: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              dateCreated: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));
          object.artist.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.artist.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Artist] entity fields to define ObjectBox queries.
class Artist_ {
  /// see [Artist.id]
  static final id = QueryIntegerProperty<Artist>(_entities[0].properties[0]);

  /// see [Artist.name]
  static final name = QueryStringProperty<Artist>(_entities[0].properties[1]);

  /// see [Artist.dateCreated]
  static final dateCreated =
      QueryIntegerProperty<Artist>(_entities[0].properties[2]);

  /// see [Artist.link]
  static final link = QueryStringProperty<Artist>(_entities[0].properties[3]);
}

/// [Lyrics] entity fields to define ObjectBox queries.
class Lyrics_ {
  /// see [Lyrics.id]
  static final id = QueryIntegerProperty<Lyrics>(_entities[1].properties[0]);

  /// see [Lyrics.content]
  static final content =
      QueryStringProperty<Lyrics>(_entities[1].properties[1]);

  /// see [Lyrics.dateCreated]
  static final dateCreated =
      QueryIntegerProperty<Lyrics>(_entities[1].properties[2]);

  /// see [Lyrics.link]
  static final link = QueryStringProperty<Lyrics>(_entities[1].properties[3]);

  /// see [Lyrics.artist]
  static final artist =
      QueryRelationToOne<Lyrics, Artist>(_entities[1].properties[4]);

  /// see [Lyrics.title]
  static final title = QueryStringProperty<Lyrics>(_entities[1].properties[5]);
}
